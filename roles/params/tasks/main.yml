---
# brickburg/linuxrouter/roles/params/tasks/main.yml

- name: Install packages
  apt:
    force_apt_get: yes
    name:
      - python3-jsonschema

- name: Validate lirou configuration against schema
  ansible.utils.validate:
    data: "{{ ({ 'lr': lr }) }}"
    criteria:
      - "{{lookup('file',  ((role_path + '/../../lirou-config-schema.json') | realpath)) | from_json}}"
    engine: ansible.utils.jsonschema
  ignore_errors: true
  register: result

- name: Print lirou config validation errors
  ansible.builtin.debug:
    msg: "In {{item.data_path}}: {{item.message}}"
  loop: "{{ result['errors'] }}"
  when: "'errors' in result"

- name: Fail on lirou config validation errors
  fail:
    msg: 'lirou configuration contains errors, open the config file in a IDE like VSCode and enable schema validation to see more details. Abort.'
  when: "'errors' in result"

- name: Generate interface lists (static)
  set_fact:
    lr_laninterfacenames: "{{ lr_laninterfacenames | default([]) + [ item | brickburg.linuxrouter.interfacename ] }}"
  when: 'item.state == "present" and ("address" in item or item.dhcpclient.enabled|default(False)) and item.upstream|default(False) == False'
  loop: "{{lr.lans}}"

- name: Generate address lists
  set_fact:
    lr_lansubnets: "{{ lr_lansubnets | default([]) + [ item.address ~ '/' ~ item.prefix ] }}"
  when: 'item.state == "present" and "address" in item and "prefix" in item'
  loop: "{{lr.lans}}"

- name: Generate upstream interface lists
  set_fact:
    lr_upstreaminterfacenames: "{{ lr_upstreaminterfacenames | default([]) + [ item | brickburg.linuxrouter.interfacename ] }}"
  when: 'item.state == "present" and item.upstream|default(False) == True'
  loop: "{{lr.lans}}"

- name: Fail when no upstream found
  fail:
    msg: 'No upstream interface found'
  when: 'lr_upstreaminterfacenames|length < 1'
